buildscript {
    repositories {
        // ...
        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal
        google()  // Google's Maven repository
    }
    dependencies {
        // ...
        // OneSignal-Gradle-Plugin
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.10, 0.99.99]'
        classpath 'com.google.gms:google-services:4.3.14'
    }
}

apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def environment = System.getenv()

def flutterVersionCode = environment["FLUTTER_VERSION_CODE"]

if (flutterVersionCode == null) {
    flutterVersionCode = localProperties.getProperty('flutter.versionCode')
}

if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = environment["FLUTTER_VERSION_NAME"]

if (flutterVersionName == null) {
    flutterVersionName = localProperties.getProperty('flutter.versionName')
}

if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def branchKey = localProperties["branch.key"] ?: environment["BRANCH_KEY"]
if (branchKey == null) {
    throw new GradleException("Branch key not found.")
}

def branchKeyTest = localProperties["branch.keyTest"] ?: environment["BRANCH_KEY_TEST"]
if (branchKeyTest == null) {
    throw new GradleException("Branch test key not found.")
}

def branchTestMode = localProperties["branch.testMode"] ?: environment["BRANCH_IS_TEST"] ?: false

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.gms.google-services'

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    flavorDimensions 'env'

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.bitmark.autonomy_client"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        manifestPlaceholders = [
                branchKey     : branchKey,
                branchKeyTest : branchKeyTest,
                branchTestMode: branchTestMode
        ]
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }

    productFlavors {
        inhouse {
            dimension "env"
            applicationIdSuffix ".inhouse"
            resValue "string", "app_name", "Autonomy (Dev)"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_dev",
                    appIconRound: "@mipmap/ic_launcher_dev_round"
            ]
        }

        prd {
            dimension "env"
            resValue "string", "app_name", "Autonomy"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude '**/lib/libsodiumjni.dylib'
        pickFirst '**/*.so'
    }

    defaultConfig {
        resConfigs "en", "US"
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

flutter {
    source '../..'
}

dependencies {
    def lifecycle_version = "2.6.0-alpha03"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1")
    implementation("com.github.autonomy-system:beacon-android-sdk:3.1.6") {
        exclude group: 'com.goterl'
        exclude module: 'lazysodium-android'
        exclude group: 'net.java.dev.jna'
        exclude module: 'jna'
        exclude group: 'com.google.protobuf'
        exclude module: 'jetified-protobuf-java'
    }
    implementation 'com.google.android.gms:play-services-auth-blockstore:16.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation('com.github.bitmark-inc:libauk-kotlin:0.4.1') {
        exclude group: 'com.google.protobuf'
        exclude module: 'jetified-protobuf-java'
    }
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation("androidx.lifecycle:lifecycle-process:$lifecycle_version")
    implementation("com.google.code.gson:gson:2.9.1")
    implementation("com.android.installreferrer:installreferrer:2.2")
    implementation("com.google.android.gms:play-services-ads-identifier:18.0.1")
    implementation("com.walletconnect:android-core:1.3.0")
    implementation("com.walletconnect:android-core-impl:1.3.0")
    implementation("com.walletconnect:sign:2.1.0")
}
