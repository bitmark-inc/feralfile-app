// Mocks generated by Mockito 5.4.2 from annotations
// in autonomy_flutter/test/generate_mock/gateway/mock_activation_api.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:autonomy_flutter/gateway/activation_api.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeActivationInfo_0 extends _i1.SmartFake
    implements _i2.ActivationInfo {
  _FakeActivationInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActivationClaimResponse_1 extends _i1.SmartFake
    implements _i2.ActivationClaimResponse {
  _FakeActivationClaimResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActivationApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivationApi extends _i1.Mock implements _i2.ActivationApi {
  MockActivationApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.ActivationInfo> getActivation(String? activationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivation,
          [activationId],
        ),
        returnValue: _i3.Future<_i2.ActivationInfo>.value(_FakeActivationInfo_0(
          this,
          Invocation.method(
            #getActivation,
            [activationId],
          ),
        )),
      ) as _i3.Future<_i2.ActivationInfo>);
  @override
  _i3.Future<_i2.ActivationClaimResponse> claim(
          _i2.ActivationClaimRequest? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #claim,
          [body],
        ),
        returnValue: _i3.Future<_i2.ActivationClaimResponse>.value(
            _FakeActivationClaimResponse_1(
          this,
          Invocation.method(
            #claim,
            [body],
          ),
        )),
      ) as _i3.Future<_i2.ActivationClaimResponse>);
}
