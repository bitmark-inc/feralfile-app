// Mocks generated by Mockito 5.4.2 from annotations
// in autonomy_flutter/test/generate_mock/dao/mock_asset_token_dao.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nft_collection/database/dao/asset_token_dao.dart' as _i4;
import 'package:nft_collection/models/asset_token.dart' as _i5;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseExecutor_0 extends _i1.SmartFake
    implements _i2.DatabaseExecutor {
  _FakeDatabaseExecutor_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_1<T> extends _i1.SmartFake
    implements _i3.StreamController<T> {
  _FakeStreamController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AssetTokenDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetTokenDao extends _i1.Mock implements _i4.AssetTokenDao {
  MockAssetTokenDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DatabaseExecutor);
  @override
  _i3.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_1<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i3.StreamController<String>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokens() => (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokens,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensByFilter({
    required String? filter,
    bool? withHidden = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensByFilter,
          [],
          {
            #filter: filter,
            #withHidden: withHidden,
          },
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensWithoutOffset(
          List<String>? owners) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensWithoutOffset,
          [owners],
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllPendingAssetTokens() =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllPendingAssetTokens,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<DateTime?> getLastRefreshedTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastRefreshedTime,
          [],
        ),
        returnValue: _i3.Future<DateTime?>.value(),
      ) as _i3.Future<DateTime?>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensByOwners(
    List<String>? owners,
    int? limit,
    int? lastTime,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensByOwners,
          [
            owners,
            limit,
            lastTime,
            id,
          ],
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensBeforeByOwners(
    List<String>? owners,
    int? lastTime,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensBeforeByOwners,
          [
            owners,
            lastTime,
            id,
          ],
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensByArtistID({
    required String? artistID,
    bool? withHidden = false,
    String? filter = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensByArtistID,
          [],
          {
            #artistID: artistID,
            #withHidden: withHidden,
            #filter: filter,
          },
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensByMimeTypesOrMediums({
    required List<String>? mimeTypes,
    required List<String>? mediums,
    bool? isInMimeTypes = true,
    bool? withHidden = false,
    String? filter = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensByMimeTypesOrMediums,
          [],
          {
            #mimeTypes: mimeTypes,
            #mediums: mediums,
            #isInMimeTypes: isInMimeTypes,
            #withHidden: withHidden,
            #filter: filter,
          },
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<List<_i5.AssetToken>> findAllAssetTokensByTokenIDs(
          List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokensByTokenIDs,
          [ids],
        ),
        returnValue: _i3.Future<List<_i5.AssetToken>>.value(<_i5.AssetToken>[]),
      ) as _i3.Future<List<_i5.AssetToken>>);
  @override
  _i3.Future<_i5.AssetToken?> findAssetTokenByIdAndOwner(
    String? id,
    String? owner,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAssetTokenByIdAndOwner,
          [
            id,
            owner,
          ],
        ),
        returnValue: _i3.Future<_i5.AssetToken?>.value(),
      ) as _i3.Future<_i5.AssetToken?>);
  @override
  _i3.Future<List<String>> findAllAssetTokenIDsByOwner(String? owner) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllAssetTokenIDsByOwner,
          [owner],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);
  @override
  _i3.Future<List<String>> findRemoveArtistIDsByOwner(List<String>? owners) =>
      (super.noSuchMethod(
        Invocation.method(
          #findRemoveArtistIDsByOwner,
          [owners],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);
  @override
  _i3.Future<List<String>> findAllArtists() => (super.noSuchMethod(
        Invocation.method(
          #findAllArtists,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);
}
