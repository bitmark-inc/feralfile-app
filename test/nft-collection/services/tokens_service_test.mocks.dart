// Mocks generated by Mockito 5.3.0 from annotations
// in autonomy_flutter/test/nft-collection/services/tokens_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:isolate' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nft_collection/data/api/indexer_api.dart' as _i11;
import 'package:nft_collection/data/api/tzkt_api.dart' as _i16;
import 'package:nft_collection/database/dao/asset_token_dao.dart' as _i2;
import 'package:nft_collection/database/dao/provenance_dao.dart' as _i4;
import 'package:nft_collection/database/dao/token_owner_dao.dart' as _i3;
import 'package:nft_collection/database/nft_collection_database.dart' as _i9;
import 'package:nft_collection/models/asset.dart' as _i12;
import 'package:nft_collection/models/asset_token.dart' as _i13;
import 'package:nft_collection/models/identity.dart' as _i7;
import 'package:nft_collection/models/provenance.dart' as _i15;
import 'package:nft_collection/models/token_owner.dart' as _i14;
import 'package:nft_collection/models/tzkt_operation.dart' as _i17;
import 'package:nft_collection/services/configuration_service.dart' as _i10;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssetTokenDao_0 extends _i1.SmartFake implements _i2.AssetTokenDao {
  _FakeAssetTokenDao_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTokenOwnerDao_1 extends _i1.SmartFake implements _i3.TokenOwnerDao {
  _FakeTokenOwnerDao_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeProvenanceDao_2 extends _i1.SmartFake implements _i4.ProvenanceDao {
  _FakeProvenanceDao_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamController_3<T> extends _i1.SmartFake
    implements _i5.StreamController<T> {
  _FakeStreamController_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDatabaseExecutor_4 extends _i1.SmartFake
    implements _i6.DatabaseExecutor {
  _FakeDatabaseExecutor_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBlockchainIdentity_5 extends _i1.SmartFake
    implements _i7.BlockchainIdentity {
  _FakeBlockchainIdentity_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [SendPort].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendPort extends _i1.Mock implements _i8.SendPort {
  MockSendPort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void send(Object? message) =>
      super.noSuchMethod(Invocation.method(#send, [message]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NftCollectionDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockNftCollectionDatabase extends _i1.Mock
    implements _i9.NftCollectionDatabase {
  MockNftCollectionDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AssetTokenDao get assetDao => (super.noSuchMethod(
          Invocation.getter(#assetDao),
          returnValue: _FakeAssetTokenDao_0(this, Invocation.getter(#assetDao)))
      as _i2.AssetTokenDao);
  @override
  _i3.TokenOwnerDao get tokenOwnerDao =>
      (super.noSuchMethod(Invocation.getter(#tokenOwnerDao),
              returnValue:
                  _FakeTokenOwnerDao_1(this, Invocation.getter(#tokenOwnerDao)))
          as _i3.TokenOwnerDao);
  @override
  _i4.ProvenanceDao get provenanceDao =>
      (super.noSuchMethod(Invocation.getter(#provenanceDao),
              returnValue:
                  _FakeProvenanceDao_2(this, Invocation.getter(#provenanceDao)))
          as _i4.ProvenanceDao);
  @override
  _i5.StreamController<String> get changeListener =>
      (super.noSuchMethod(Invocation.getter(#changeListener),
              returnValue: _FakeStreamController_3<String>(
                  this, Invocation.getter(#changeListener)))
          as _i5.StreamController<String>);
  @override
  set changeListener(_i5.StreamController<String>? _changeListener) =>
      super.noSuchMethod(Invocation.setter(#changeListener, _changeListener),
          returnValueForMissingStub: null);
  @override
  _i6.DatabaseExecutor get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue:
                  _FakeDatabaseExecutor_4(this, Invocation.getter(#database)))
          as _i6.DatabaseExecutor);
  @override
  set database(_i6.DatabaseExecutor? _database) =>
      super.noSuchMethod(Invocation.setter(#database, _database),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> removeAll() =>
      (super.noSuchMethod(Invocation.method(#removeAll, []),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [NftCollectionPrefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockNftCollectionPrefs extends _i1.Mock
    implements _i10.NftCollectionPrefs {
  MockNftCollectionPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> setLatestRefreshTokens(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLatestRefreshTokens, [time]),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<DateTime?> getLatestRefreshTokens() =>
      (super.noSuchMethod(Invocation.method(#getLatestRefreshTokens, []),
          returnValue: _i5.Future<DateTime?>.value()) as _i5.Future<DateTime?>);
}

/// A class which mocks [IndexerApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockIndexerApi extends _i1.Mock implements _i11.IndexerApi {
  MockIndexerApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i12.Asset>> getNftTokens(Map<String, List<String>>? ids) =>
      (super.noSuchMethod(Invocation.method(#getNftTokens, [ids]),
              returnValue: _i5.Future<List<_i12.Asset>>.value(<_i12.Asset>[]))
          as _i5.Future<List<_i12.Asset>>);
  @override
  _i5.Future<List<_i12.Asset>> getNFTTokens(int? offset) =>
      (super.noSuchMethod(Invocation.method(#getNFTTokens, [offset]),
              returnValue: _i5.Future<List<_i12.Asset>>.value(<_i12.Asset>[]))
          as _i5.Future<List<_i12.Asset>>);
  @override
  _i5.Future<List<_i12.Asset>> getNftTokensByOwner(
          String? owner, int? offset, int? size) =>
      (super.noSuchMethod(
              Invocation.method(#getNftTokensByOwner, [owner, offset, size]),
              returnValue: _i5.Future<List<_i12.Asset>>.value(<_i12.Asset>[]))
          as _i5.Future<List<_i12.Asset>>);
  @override
  _i5.Future<dynamic> requestIndex(Map<String, String>? payload) =>
      (super.noSuchMethod(Invocation.method(#requestIndex, [payload]),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> requestIndexOne(Map<String, dynamic>? payload) =>
      (super.noSuchMethod(Invocation.method(#requestIndexOne, [payload]),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i7.BlockchainIdentity> getIdentity(String? accountNumber) =>
      (super.noSuchMethod(Invocation.method(#getIdentity, [accountNumber]),
              returnValue: _i5.Future<_i7.BlockchainIdentity>.value(
                  _FakeBlockchainIdentity_5(
                      this, Invocation.method(#getIdentity, [accountNumber]))))
          as _i5.Future<_i7.BlockchainIdentity>);
  @override
  _i5.Future<List<String>> getNftIDsByOwner(String? owner) =>
      (super.noSuchMethod(Invocation.method(#getNftIDsByOwner, [owner]),
              returnValue: _i5.Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
}

/// A class which mocks [AssetTokenDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetTokenDao extends _i1.Mock implements _i2.AssetTokenDao {
  MockAssetTokenDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i13.AssetToken>> findAllAssetTokens() =>
      (super.noSuchMethod(Invocation.method(#findAllAssetTokens, []),
              returnValue:
                  _i5.Future<List<_i13.AssetToken>>.value(<_i13.AssetToken>[]))
          as _i5.Future<List<_i13.AssetToken>>);
  @override
  _i5.Future<List<_i13.AssetToken>> findAllAssetTokensByOwners(
          List<String>? owners) =>
      (super.noSuchMethod(
              Invocation.method(#findAllAssetTokensByOwners, [owners]),
              returnValue:
                  _i5.Future<List<_i13.AssetToken>>.value(<_i13.AssetToken>[]))
          as _i5.Future<List<_i13.AssetToken>>);
  @override
  _i5.Future<List<_i13.AssetToken>> findAssetTokensByBlockchain(
          String? blockchain) =>
      (super.noSuchMethod(
              Invocation.method(#findAssetTokensByBlockchain, [blockchain]),
              returnValue:
                  _i5.Future<List<_i13.AssetToken>>.value(<_i13.AssetToken>[]))
          as _i5.Future<List<_i13.AssetToken>>);
  @override
  _i5.Future<_i13.AssetToken?> findAssetTokenById(String? id) =>
      (super.noSuchMethod(Invocation.method(#findAssetTokenById, [id]),
              returnValue: _i5.Future<_i13.AssetToken?>.value())
          as _i5.Future<_i13.AssetToken?>);
  @override
  _i5.Future<List<_i13.AssetToken>> findAllAssetTokensByIds(
          List<String>? ids) =>
      (super.noSuchMethod(Invocation.method(#findAllAssetTokensByIds, [ids]),
              returnValue:
                  _i5.Future<List<_i13.AssetToken>>.value(<_i13.AssetToken>[]))
          as _i5.Future<List<_i13.AssetToken>>);
  @override
  _i5.Future<List<String>> findAllAssetTokenIDs() =>
      (super.noSuchMethod(Invocation.method(#findAllAssetTokenIDs, []),
              returnValue: _i5.Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  _i5.Future<List<String>> findAllAssetTokenIDsByOwner(String? owner) =>
      (super.noSuchMethod(
              Invocation.method(#findAllAssetTokenIDsByOwner, [owner]),
              returnValue: _i5.Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  _i5.Future<List<String>> findAllAssetArtistIDs() =>
      (super.noSuchMethod(Invocation.method(#findAllAssetArtistIDs, []),
              returnValue: _i5.Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  _i5.Future<List<_i13.AssetToken>> findAllPendingTokens() =>
      (super.noSuchMethod(Invocation.method(#findAllPendingTokens, []),
              returnValue:
                  _i5.Future<List<_i13.AssetToken>>.value(<_i13.AssetToken>[]))
          as _i5.Future<List<_i13.AssetToken>>);
  @override
  _i5.Future<void> insertAsset(_i13.AssetToken? asset) => (super.noSuchMethod(
      Invocation.method(#insertAsset, [asset]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> insertAssets(List<_i13.AssetToken>? assets) =>
      (super.noSuchMethod(Invocation.method(#insertAssets, [assets]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> updateAsset(_i13.AssetToken? asset) => (super.noSuchMethod(
      Invocation.method(#updateAsset, [asset]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAsset(_i13.AssetToken? asset) => (super.noSuchMethod(
      Invocation.method(#deleteAsset, [asset]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAssets(List<String>? ids) => (super.noSuchMethod(
      Invocation.method(#deleteAssets, [ids]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAssetsNotIn(List<String>? ids) => (super.noSuchMethod(
      Invocation.method(#deleteAssetsNotIn, [ids]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAssetsNotBelongs(List<String>? owners) =>
      (super.noSuchMethod(Invocation.method(#deleteAssetsNotBelongs, [owners]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> removeAll() => (super.noSuchMethod(
      Invocation.method(#removeAll, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [TokenOwnerDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenOwnerDao extends _i1.Mock implements _i3.TokenOwnerDao {
  MockTokenOwnerDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> insertTokenOwners(List<_i14.TokenOwner>? owners) =>
      (super.noSuchMethod(Invocation.method(#insertTokenOwners, [owners]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
}

/// A class which mocks [ProvenanceDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockProvenanceDao extends _i1.Mock implements _i4.ProvenanceDao {
  MockProvenanceDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> insertProvenance(List<_i15.Provenance>? provenance) =>
      (super.noSuchMethod(Invocation.method(#insertProvenance, [provenance]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<List<_i15.Provenance>> findProvenanceByTokenID(String? tokenID) =>
      (super.noSuchMethod(
              Invocation.method(#findProvenanceByTokenID, [tokenID]),
              returnValue:
                  _i5.Future<List<_i15.Provenance>>.value(<_i15.Provenance>[]))
          as _i5.Future<List<_i15.Provenance>>);
  @override
  _i5.Future<void> deleteProvenanceNotBelongs(List<String>? tokenIDs) =>
      (super.noSuchMethod(
              Invocation.method(#deleteProvenanceNotBelongs, [tokenIDs]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> removeAll() => (super.noSuchMethod(
      Invocation.method(#removeAll, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [TZKTApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTZKTApi extends _i1.Mock implements _i16.TZKTApi {
  MockTZKTApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i17.TZKTTokenTransfer>> getTokenTransfer(
          {String? to,
          String? sort = r'timestamp',
          String? tokenIds,
          String? select}) =>
      (super.noSuchMethod(
              Invocation.method(#getTokenTransfer, [],
                  {#to: to, #sort: sort, #tokenIds: tokenIds, #select: select}),
              returnValue: _i5.Future<List<_i17.TZKTTokenTransfer>>.value(
                  <_i17.TZKTTokenTransfer>[]))
          as _i5.Future<List<_i17.TZKTTokenTransfer>>);
}
