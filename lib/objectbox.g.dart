// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/draft_customer_support.dart';
import 'model/identity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3699075574402622260),
      name: 'DraftCustomerSupport',
      lastPropertyId: const obx_int.IdUid(9, 5697303813667306313),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8917084034397599361),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5431218458790902201),
            name: 'uuid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6617403950842871541),
            name: 'issueID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6021759305910841352),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6559457832299594712),
            name: 'data',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3636663615958270973),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8229241486535930688),
            name: 'reportIssueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5881703805512781879),
            name: 'mutedMessages',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5697303813667306313),
            name: 'rating',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3545671819156561601),
      name: 'Identity',
      lastPropertyId: const obx_int.IdUid(5, 8142450773936588127),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3766269381233881871),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5605060947817876347),
            name: 'accountNumber',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 8706340799772803385)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5469044788118803694),
            name: 'blockchain',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5908046236401052457),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8142450773936588127),
            name: 'queriedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 3545671819156561601),
      lastIndexId: const obx_int.IdUid(1, 8706340799772803385),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DraftCustomerSupport: obx_int.EntityDefinition<DraftCustomerSupport>(
        model: _entities[0],
        toOneRelations: (DraftCustomerSupport object) => [],
        toManyRelations: (DraftCustomerSupport object) => {},
        getId: (DraftCustomerSupport object) => object.id,
        setId: (DraftCustomerSupport object, int id) {
          object.id = id;
        },
        objectToFB: (DraftCustomerSupport object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final issueIDOffset = fbb.writeString(object.issueID);
          final typeOffset = fbb.writeString(object.type);
          final dataOffset = fbb.writeString(object.data);
          final reportIssueTypeOffset = fbb.writeString(object.reportIssueType);
          final mutedMessagesOffset = fbb.writeString(object.mutedMessages);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, issueIDOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, dataOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, reportIssueTypeOffset);
          fbb.addOffset(7, mutedMessagesOffset);
          fbb.addInt64(8, object.rating);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final issueIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final reportIssueTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final mutedMessagesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final ratingParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = DraftCustomerSupport(
              uuid: uuidParam,
              issueID: issueIDParam,
              type: typeParam,
              data: dataParam,
              createdAt: createdAtParam,
              reportIssueType: reportIssueTypeParam,
              mutedMessages: mutedMessagesParam,
              rating: ratingParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Identity: obx_int.EntityDefinition<Identity>(
        model: _entities[1],
        toOneRelations: (Identity object) => [],
        toManyRelations: (Identity object) => {},
        getId: (Identity object) => object.id,
        setId: (Identity object, int id) {
          object.id = id;
        },
        objectToFB: (Identity object, fb.Builder fbb) {
          final accountNumberOffset = fbb.writeString(object.accountNumber);
          final blockchainOffset = fbb.writeString(object.blockchain);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accountNumberOffset);
          fbb.addOffset(2, blockchainOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.queriedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final accountNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final blockchainParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Identity(
              accountNumberParam, blockchainParam, nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..queriedAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DraftCustomerSupport] entity fields to define ObjectBox queries.
class DraftCustomerSupport_ {
  /// See [DraftCustomerSupport.id].
  static final id = obx.QueryIntegerProperty<DraftCustomerSupport>(
      _entities[0].properties[0]);

  /// See [DraftCustomerSupport.uuid].
  static final uuid =
      obx.QueryStringProperty<DraftCustomerSupport>(_entities[0].properties[1]);

  /// See [DraftCustomerSupport.issueID].
  static final issueID =
      obx.QueryStringProperty<DraftCustomerSupport>(_entities[0].properties[2]);

  /// See [DraftCustomerSupport.type].
  static final type =
      obx.QueryStringProperty<DraftCustomerSupport>(_entities[0].properties[3]);

  /// See [DraftCustomerSupport.data].
  static final data =
      obx.QueryStringProperty<DraftCustomerSupport>(_entities[0].properties[4]);

  /// See [DraftCustomerSupport.createdAt].
  static final createdAt =
      obx.QueryDateProperty<DraftCustomerSupport>(_entities[0].properties[5]);

  /// See [DraftCustomerSupport.reportIssueType].
  static final reportIssueType =
      obx.QueryStringProperty<DraftCustomerSupport>(_entities[0].properties[6]);

  /// See [DraftCustomerSupport.mutedMessages].
  static final mutedMessages =
      obx.QueryStringProperty<DraftCustomerSupport>(_entities[0].properties[7]);

  /// See [DraftCustomerSupport.rating].
  static final rating = obx.QueryIntegerProperty<DraftCustomerSupport>(
      _entities[0].properties[8]);
}

/// [Identity] entity fields to define ObjectBox queries.
class Identity_ {
  /// See [Identity.id].
  static final id =
      obx.QueryIntegerProperty<Identity>(_entities[1].properties[0]);

  /// See [Identity.accountNumber].
  static final accountNumber =
      obx.QueryStringProperty<Identity>(_entities[1].properties[1]);

  /// See [Identity.blockchain].
  static final blockchain =
      obx.QueryStringProperty<Identity>(_entities[1].properties[2]);

  /// See [Identity.name].
  static final name =
      obx.QueryStringProperty<Identity>(_entities[1].properties[3]);

  /// See [Identity.queriedAt].
  static final queriedAt =
      obx.QueryDateProperty<Identity>(_entities[1].properties[4]);
}
